# -*- coding: utf-8 -*-
"""Equality Index for Countries.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/17ypQ3SBY8tgVJ5iFdf5HA8WT0x2WDYt4
"""

import pandas as pd

world_bank_data = { 
    "womanCanWorkAtNight" : "/content/A woman can work at night_Data.csv",
    "avgAgeAtFirstMarriage" : "/content/average age of first marriage female_Data.csv",
    "employedFemales" : "/content/females in labor force_Data.csv",
    "leastPrimary" : "/content/percent of females with at least primary school completed_Data.csv",
    "leastSecondary" : "/content/percent of females with at least secondary education_Data.csv",
    "leastBachelors" : "/content/percent of females with at least bachelors education_Data.csv",
    "womenInParliament" : "/content/women in parliament_Data.csv", 
}

countryMap = pd.read_csv("/content/A woman can work at night_Data.csv")
  countryMap.columns.values[2] = "country"
  countryMap.columns.values[3] = "countryCode"
  countryMap = countryMap[['country', 'countryCode']]
  countryMap.dropna(subset=['countryCode'], inplace = True)
  countryMap.head()

gender_equality_index = pd.read_csv("/content/GEI.csv")
gender_equality_index.head()

df_dict = { }
def readTimeSeriesDataFromWorldBank(file_path, dict_key) : 
  df = pd.read_csv(file_path)
  df.drop(['Series Name', 'Series Code'], inplace=True, axis=1)
  df.columns.values[1] = "countryCode"
  df.columns=df.columns.str.split().str[0]
  df.dropna(subset=['countryCode'], inplace = True)
  df_dict[dict_key] = df

for key in world_bank_data :
  readTimeSeriesDataFromWorldBank(world_bank_data[key], key)

dict_2021 = {}
for key in world_bank_data :
  tempdf = df_dict[key][["countryCode","2021"]] 
  tempdf.columns = ["countryCode", key]
  dict_2021[key] = tempdf

df = countryMap
for k in dict_2021:
    df = df.merge(dict_2021[k], on='countryCode', how='right')
df.dropna(subset=['country', 'countryCode'], inplace = True)
df.shape

df_final = pd.merge(df, gender_equality_index, on='country', how='inner') 
df_final.shape, df.shape

df_final.head()

plottingX = df_final.iloc[: , 2 : ]

import seaborn as sns

corr = plottingX.corr()
sns.heatmap(corr, 
            xticklabels=corr.columns.values,
            yticklabels=corr.columns.values)

sns.pairplot(plottingX)

df_final.isnull().sum()

from sklearn.model_selection import train_test_split

training_data, testing_data = train_test_split(df_final.iloc[:, 2:], test_size=0.2, random_state=25)

from sklearn.ensemble import RandomForestRegressor
from sklearn.datasets import make_regression
from sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error
import numpy as np

X = training_data
y = training_data.iloc[:, 7:]
rfr = RandomForestRegressor(max_depth=8)
rfr.fit(X, y)
y_pred = rfr.predict(testing_data)
y_test = testing_data.iloc[:, 7:]

print("R^2 : ", r2_score(y_test, y_pred))
print("MAE :", mean_absolute_error(y_test, y_pred))
print("RMSE:",np.sqrt(mean_squared_error(y_test, y_pred)))